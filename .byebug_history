arr
arr.slice(2,3)
arr.slice(2,4)
index
a
element
c
d[:marks].values
d[:marks]
d.marks
d
to_be_deleted
string
c
k
k.class
new_sum.class
Array.new(0..@distance.values.max, 0)
@distance.values.max
@distance
c
current_key
From #{current_key} take a path to #{end_point}
c
"From #{current_key} take a path to #{end_point}"
current_key
c
start
@pointer
pointer_hash
c
distance
distanve
c
distance
distanve
c
@distance
@distanve
@distance[end_point.to_sym]
end_point.to_sym
end_point
@distance
distance
distanve
c
point
@graph
key_hash
c
key_hash
c
key_hash
c
key_hash
c
key_hash
c
cc
c
min_distance
c
@distance["Anne"]
@distance
min_distance
val
key
c
@graph
@graph["Anne"]
point
poinr
@graph["Barbara"]
@graph
key_hash
c
arr1.to_h
arr1
keys
c
keys
c
@distance[point]
@distance
c
a == bb.uniq
a == bb
bb = [:a, :a, :a]
a == bb
bb = [:a]
a
a == b
b = [:a]
a = [:a]
@graph_keys 
keys_evaluated
c
@graph_keys.methods.sort
@graph_keys.nil?
@graph_keys.blank?
@graph_keys
c
