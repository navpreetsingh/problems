c
keys
c
arr.map(&:to_sym)
arr
c
a
a.shift
a = [1,2,3]
@distance_counter.shift.sum
@distance_counter.shift
c
Array.new(@distance.values.max+1)
distance_points
a
distance_points[1].push("b")
distance_points
distance_points[0].push("a")
distance_points
distance_points[0].push(:a)
distance_points
byebug
c
cc
c
a
a[0].push(5)
a = [[],[],[]]
a
a[0].push(5)
a[0]
a = [[1],[2],[3]]
distance_points.count
distance_points[2]
distance_points[1]
distance_points[0]
distance_points
distance_points[1].push('a')
distance_points[v].push(k)
k
distance_points[v]
byebug
p v
pp v
v
c
distance_points
c
distance_counter
c
current_key
From #{current_key} take a path to #{end_point}
c
"From #{current_key} take a path to #{end_point}"
current_key
c
start
@pointer
pointer_hash
c
distance
distanve
c
distance
distanve
c
@distance
@distanve
@distance[end_point.to_sym]
end_point.to_sym
end_point
@distance
distance
distanve
c
point
@graph
key_hash
c
key_hash
c
key_hash
c
key_hash
c
key_hash
c
cc
c
min_distance
c
@distance["Anne"]
@distance
min_distance
val
key
c
@graph
@graph["Anne"]
point
poinr
@graph["Barbara"]
@graph
key_hash
c
arr1.to_h
arr1
keys
c
keys
c
@distance[point]
@distance
c
a == bb.uniq
a == bb
bb = [:a, :a, :a]
a == bb
bb = [:a]
a
a == b
b = [:a]
a = [:a]
@graph_keys 
keys_evaluated
c
@graph_keys.methods.sort
@graph_keys.nil?
@graph_keys.blank?
@graph_keys
c
